Searching 39 files for "ActivityAborted"

/Users/wbult/RentMethodEnv/usr/src/pyworkflow/README.md:
   19  
   20  ````
   21: from pyworkflow.activity import Activity, ActivityAborted
   22  
   23  class MultiplicationActivity(Activity):
   ..
   31  
   32  		if input[0] > 10:
   33: 			return ActivityAborted("first operand must be <= 10")
   34  
   35  		result = 0

/Users/wbult/RentMethodEnv/usr/src/pyworkflow/pyworkflow/backend/amazonswf/__init__.py:
   11  from ...exceptions import TimedOutException
   12  from ...defaults import Defaults
   13: from .process import AmazonSWFProcess, ActivityCompleted, ActivityFailed, ActivityAborted
   14  from .task import decision_task_from_description, activity_task_from_description
   15  from .decision import AmazonSWFDecision
   ..
  104              if isinstance(result, ActivityCompleted):
  105                  self._swf.respond_activity_task_completed(task.context['token'], result=json.dumps(result.result))
  106:             elif isinstance(result, ActivityAborted):
  107                  self._swf.respond_activity_task_canceled(task.context['token'], details=result.details)
  108              elif isinstance(result, ActivityFailed):
  109                  self._swf.respond_activity_task_failed(task.context['token'], details=result.details, reason=result.reason)
  110              else:
  111:                 raise ValueError('Expected result of type in [ActivityCompleted, ActivityAborted, ActivityFailed]')
  112          except SWFResponseError, e:
  113              if e.body.get('__type', None) == 'com.amazonaws.swf.base.model#UnknownResourceFault':

/Users/wbult/RentMethodEnv/usr/src/pyworkflow/pyworkflow/backend/amazonswf/process.py:
    5  from ...event import Event, DecisionEvent, ActivityEvent, ActivityStartedEvent, SignalEvent
    6  from ...signal import Signal
    7: from ...activity import ActivityCompleted, ActivityAborted, ActivityFailed, ActivityTimedOut, ActivityExecution
    8  from ...decision import ScheduleActivity
    9  
   ..
   42          elif event_type == 'ActivityTaskCanceled':
   43              details = attributes.get('details', None)
   44:             return activity_event_with_result(ActivityAborted(details=details))
   45          elif event_type == 'ActivityTaskTimedOut':
   46              details = attributes.get('details', None)

/Users/wbult/RentMethodEnv/usr/src/pyworkflow/pyworkflow/backend/blinker/__init__.py:
   79          mapping = {
   80              ActivityCompleted: BlinkerBackend.on_activity_completed,
   81:             ActivityAborted: BlinkerBackend.on_activity_aborted,
   82              ActivityFailed: BlinkerBackend.on_activity_failed
   83          }

/Users/wbult/RentMethodEnv/usr/src/pyworkflow/pyworkflow/test/__init__.py:
    8  from ..workflow import Workflow, DefaultWorkflow
    9  from ..process import Process
   10: from ..activity import Activity, ActivityExecution, ActivityMonitor, ActivityCompleted, ActivityFailed, ActivityAborted
   11  from ..decision import ScheduleActivity, CompleteProcess, CancelProcess, CancelActivity
   12  from ..event import DecisionEvent, ActivityEvent, ActivityStartedEvent, SignalEvent
   ..
   64  
   65              def is_interrupted_event(event):
   66:                 return isinstance(event, ActivityEvent) and (isinstance(event.result, ActivityFailed) or isinstance(event.result, ActivityAborted))
   67  
   68              if not filter(lambda ev: ev.activity.name == 'Shipment', filter(is_interrupted_event, process.unseen_events())):
   ..
  329          # Simulate activity task abortion
  330          task = backend.poll_activity_task()
  331:         backend.complete_activity_task(task, ActivityAborted(details='test'))
  332          date_aborted = datetime.now()
  333  
  ...
  342              DecisionEvent(decision=ScheduleActivity('double', id=activity_id, input=2), datetime=date_scheduled2),
  343              ActivityStartedEvent(ActivityExecution('double', activity_id, 2)),
  344:             ActivityEvent(ActivityExecution('double', activity_id, 2), result=ActivityAborted(details='test'), datetime=date_aborted)
  345              ]))
  346  
  ...
  365              DecisionEvent(decision=ScheduleActivity('double', id=activity_id, input=2), datetime=date_scheduled2),
  366              ActivityStartedEvent(ActivityExecution('double', activity_id, 2)),
  367:             ActivityEvent(ActivityExecution('double', activity_id, 2), result=ActivityAborted(details='test'), datetime=date_aborted),
  368              DecisionEvent(decision=ScheduleActivity('double', id=activity_id, input=2), datetime=date_scheduled3),
  369              ActivityStartedEvent(ActivityExecution('double', activity_id, 2)),
  ...
  382              DecisionEvent(decision=ScheduleActivity('double', id=activity_id, input=2), datetime=date_scheduled2),
  383              ActivityStartedEvent(ActivityExecution('double', activity_id, 2)),
  384:             ActivityEvent(ActivityExecution('double', activity_id, 2), result=ActivityAborted(details='test'), datetime=date_aborted),
  385              DecisionEvent(decision=ScheduleActivity('double', id=activity_id, input=2), datetime=date_scheduled3),
  386              ActivityStartedEvent(ActivityExecution('double', activity_id, 2)),
  ...
  471          task = manager.next_activity()
  472          activity = manager.activity_for_task(task)
  473:         manager.complete_task(task, ActivityAborted())
  474          
  475          # Decide: -> terminate

/Users/wbult/RentMethodEnv/usr/src/pyworkflow/pyworkflow/worker/activity.py:
    1  import traceback
    2  from uuid import uuid4
    3: from ..activity import ActivityResult, ActivityCompleted, ActivityAborted, ActivityFailed, ActivityMonitor
    4  
    5  class ActivityWorker(object):
    .
   25                  return ActivityCompleted(result)
   26  
   27:         except ActivityAborted, a:
   28              return a
   29          except ActivityFailed, f:
   ..
   35          if isinstance(result, ActivityCompleted):
   36              logger.info("Worker %s: Completed %s: %s" % (self.name, task, result))
   37:         elif isinstance(result, ActivityAborted):
   38              logger.info("Worker %s: Aborted %s: %s" % (self.name, task, result))
   39          elif isinstance(result, ActivityFailed):

18 matches across 6 files
